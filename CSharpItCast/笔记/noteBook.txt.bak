1、.Net平台  .Net FrameWork框架
.Net FrameWork框架提供了一个稳定的运行环境，；来保障我们.Net平台正常的运转

2、C#语言 c sharp
编程语言，如果你想要计算机按照你说的去做，你必须说计算机能够听懂的语言。


2001年  any time any place  and on any device
任何时间任何地点都能够让用户通过任何设备获取到用户想要的数据

1997 李开复   XXX

乔布斯  windows phone====》安卓===》wp7===》 wp8======>unity3D


Unity3D 老鼠---猫
c#
JS
BOO

3、两种交互模式
C/S:要求客户的电脑上必须要安装一个客户端：qq、360、快播等.....
B/S:要求客户的电脑上只需要安装一个浏览器。


4、IDE
IDE指的就是我们的开发工具。

5、vs的学习
1)、启动VS
a、双击图标
b、调出cmd，输入 devenv

2)、解决方案、项目及类之间的关系
解决方案：公司
项目：部门
类：员工
在视图里面找解决方案资源管理器

3)、Program中的各个组成部分
引用命名空间：
京东----》京东在线商城项目---》顾客类
淘宝----》淘宝在线商城项目---》顾客类

高端霸气公司----》老赵牛X项目---》顾客类

4)、方法或者函数 
Main函数是我们程序的主入口，你写的代码如果想要被执行的话，必须写在Main函数当中。

5)、
.sln：解决方案文件，里面包含着整个解决方案的信息，可以双击运行。
.csproj:项目文件，里面包含着这个项目的信息，可以双击运行。

6、书写代码需要注意的地方：
1、代码中出现的所有标点都是英文半角 shift键快速切换中文半角和英文半角 
shift+空格 切换全角/半角
2、在c#代码中，每行代码的结束，我们都以分号结束，注意：这个分号也是英文半角的分号。
3、Console.WriteLine("要打印的内容");
   Console.ReadKey();
   1)、暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在我们的控制台当中
   
7、运行程序的两种方式
1、点击绿色的启动按钮
2、使用快捷键F5
ctrl+shift+B：生成代码


8、生成解决方案
帮助我们排查语法错误。

1、注释符
1)、注销
2)、解释

2、c#的3种注释符
1)、单行注释 //
2)、多行注释 /*要注释的内容*/
3)、文档注释 /// 多用来解释类或者方法---》敲三个斜线自动生成

VS常用快捷键
Ctrl+K+D 快速对齐代码
Ctrl+j 快速弹出提示
Shift+End
Shift+Home
Ctrl+K+C 快速注释
Ctrl+K+U 快速取消注释
#Region #EndRegion 折叠冗余代码



3、变量
用来在计算机当中存储数据。


孙全 开房
火车 26小时  去旅馆睡觉
孙全  一个人  单人房  308
孙全 and  girl  双人间  一张床 521
孙全 and  boy  双人间 两张床  520

存储整数100 
数据类型：整数
在内存中开辟的空间应该是整数类型 int

存储变量的语法：
变量类型 变量名;
变量名=值;

"="号：在这并不表示等于的意思，而是赋值的意思，表示把等号右边的值赋值给等号左边的变量。

声明并且给变量赋值的简写形式：
变量类型 变量名=值;

4、数据类型
1)、整数类型：int  只能存储整数，不能存储小数。
2)、小数类型：double 既能存储整数，也能存储小数，小数点后面的位数 15~16位。
3)、金钱类型：decimal：用来村粗金钱，值后面需要加上一个m.
4)、字符串类型:string,用来存储多个文本，也可以存储空，字符串类型的值需要被 双引号引来，
这个双引号必须是英文半角状态下的双引号
5)、字符类型：char,用来存储单个字符，最多、最少只能有一个字符，不能存储空。
字符类型的值需要用 单引号因起来。英文半角状态下的单引号。

5、波浪线
1)、如果你的代码中出现了红色的波浪线，意味着你的代码中出现了
语法错误。
2)、如果你的代码中出现了绿色的波浪线，说明你的代码语法并没有错误，
只不过提示你有可能会出现错误，但是不一定会出现错误。警告线

6、变量的使用规则
如果你要是用变量的话，应该要先声明再赋值再使用。


7、命名规则：
****首先要保证的就是这个变量的名字要有意义。
1 现阶段给变量起名字的时候都以字母开头
2 后面可以跟任意“字母”、数字、下划线.
注意:
1）你起的变量名不要与c#系统中的关键字重复.
2）在c#中,大小写是敏感的.  HTML
3)同一个变量名不允许重复定义(先这么认为,不严谨)

给变量起名字的时候要满足两个命名规范：
1、Camel 骆驼命名规范。要求变量名首单词的首字母要小写，其余每个单词的首字母要大写。
多用于给变量命名。
2、Pascal 命名规范：要求每个单词的首字母都要大写，其余字母小写。多用于给类或者方法命名。
HighSchoolStudent

highSchoolStudent


8、赋值运算符
=：表示赋值的意思，表示把等号右边的值，赋值给等号左边的变量。
由等号连接的表达式称之为赋值表达式。
注意:每个表达式我们都可以求解除一个定值，对于赋值表达式而言，等号左边的变量的值，
就是整个赋值表达式的值。
int number=10;

9、+号的作用
1)、连接：当+号两边有一边是字符串的时候，+号就起到连接的作用。
2)、相加：两边是数字的时候


10、占位符
使用方法：先挖个坑，再填个坑。
使用占位符需要注意的地方：
1、你挖了几个坑，就应该填几个坑，如果你多填了，没效果。
                                 如果你少填了，抛异常。
2、输出顺序：按照挖坑的顺序输出。
								 
						
11、异常
异常是指：语法上并没有任何错误，只不过在程序运行的期间，由于某些原因出现了问题，
使程序不能再正常的运行。


12、转义符
转义符指的就是一个'\'+一个特殊的字符，组成了一个具有特殊意义的字符。
\n:表示换行
\":表示一个英文半角的双引号
\t:表示一个tab键的空格
\b:表示一个退格键，放到字符串的两边没有效果。
\r\n:windows操作系统不认识\n,只认识\r\n
\\:表示一个\

@符号
1、取消\在字符串中的转义作用，使其单纯的表示为一个'\'
2、将字符串按照编辑的原格式输出

13、算数运算符
+
-
*
/
%

14、类型转换
隐式类型转换：
我们要求等号两遍参与运算的操作数的类型必须一致，如果不一致，满足下列条件会发生
自动类型转换，或者称之为隐式类型转换。
两种类型兼容
例如：int 和 double 兼容(都是数字类型)
目标类型大于源类型
例如：double > int   小的转大的


显示类型转换：
1、两种类型相兼容  int--double
2、大的转成小的  double----int
语法：
(待转换的类型)要转换的值;

总结：
自动类型转换：int---->double
显示类型转换：double--->int


20平 
20平 4  5平  

1、类型如果相兼容的两个变量，可以使用自动类型转换或者强制类型转换，
但是，如果两个类型的变量不兼容，比如 string与int或者string 与double，
这个时候我们可以使用一个叫做Convert的转换工厂进行转换。
注意：使用Convert进行类型转换，也需要满足一个条件：
面儿上必须要过的去。


2、算数运算符
++：分为前++和后++，不管是前++还是后++，最终的结果都是给这个变量加一。
区别表现表达式当中，如果是前++，则先给这个变量自身加一，然后带着这个加一后的值去参与运算。
如果是后++，则先拿原值参与运算，运算完成后，再讲这个变量自身加一。
--：同上。

3、
对于向加加或者减减这样只需要一个操作数就能完成的运算，我们称之为一元运算符。
+ - * / % 对于这些需要两个或以上才能完成运算的操作符，我们称之为二元运算符。
一元运算符的优先级要高于而元运算符。
如果在一个表达式当中，既有一元运算符，又有二元运算符，我们首先计算一元运算符。

int number=10;
int result=10 + ++number;

4、关系运算符
>
<
>=
<=
==
!=
关系运算符是用来描述两个事物之间的关系
由关系运算符连接的表达式称之为关系表达式。
5、bool类型
在c#中我们用bool类型来描述对或者错。
bool类型的值只有两个 一个true  一个false

6、逻辑运算符
&& 逻辑与
||逻辑或
!逻辑非
又逻辑运算符连接的表达式叫做逻辑表达式

逻辑运算符两边放的一般都是关系表达式或者bool类型的值。
 5>3 &&true
 
 3>5||false
 
 ！表达式
 逻辑表达式的结果同样也是bool类型


7、复合赋值运算符
int number=10;
+= :
number+=20;
number=number+20;
-=
number-=5;
number=number-5;
*=
number*=5;
number=number*5;
/=
%=


中级程序员 --2年 ---高级程序员---->小组组长---> 项目经理
												业务经理
												产品经理
 高级程序员
 不明觉厉
软件开发工程师



顺序结构：程序从Main函数进入，从上到下一行一行的执行，不会落下任何一行。
分支结构:if  if-else
选择结构：if else-if switch-case
循环结构：while do-while for foreach

8、
if语句：
语法：
if(判断条件)
{
	要执行的代码;
}
判断条件：一般为关系表达式或者bool类型的值。
执行过程：程序运行到if处，首先判断if所带的小括号中的判断条件，
如果条件成立，也就是返回true，则执行if所带的大括号中的代码，
如果判断条件不成立，也就是返回一个false。则跳过if结构，继续向下执行。

if结构的特点：先判断，再执行，有可能一行代码都不执行
用于一种情况的判断。


9、if-else
语法：
if(判断条件)
{
	执行的代码;
}
else
{
	执行的代码
}
执行过程：程序执行到if处，首先判断if所带的小括号中的判断条件是否成立，
如果成立，也就是返回一个true，则执行if所带的大括号中的代码，
执行完成后，跳出if-else结构。
如果if所带的小括号中的判断条件不成立，也就是返回一个false，
则跳过if语句，执行else所带的大括号中的语句，执行完成后，跳出if-else结构。

if-else特点：先判断，再执行，最少都要执行一条代码。
用于两种情况的判断

注意：else永远跟离它最近的那个if配对


10、if else-if
作用：用来处理多条件的区间性的判断。
语法：
if(判断条件)
{
	要执行的代码;
}
else if(判断条件)
{
	要执行的代码;
}
else if(判断条件)
{
	要执行的代码;
}
else if(判断条件)
{
	要执行的代码;
}
........
else
{
	要执行的代码;
}
执行过程；程序首先判断第一个if所带的小括号中的判断条件，如果条件成立，也就是返回一个true，
则执行该if所带的大括号中的代码，执行完成后，立即跳出if else-if结构。
如果第一个if所带的判断条件不成立，也就是返回一个false，则继续向下进行判断，依次的判断每一个if所带
的判断条件，如果成立，就执行该if所带的大括号中的代码，如果不成立，则继续向下判断，
如果每个if所带的判断条件都不成立，就看当前这个if else-if结构中是否存在else。
如果有else的话，则执行else中所带的代码，如果没有else，则整个 if-else if神马都不做。
else可以省略。

1、异常捕获
我们在程序中经常会出现各种各样的异常，你如果想要你的程序变得坚强一些。
在你的代码中应该经常性的使用try-catch来进行异常捕获。

哪行代码有可能出现异常，你就踹它一脚。
语法：
try
{
	可能会出现异常的代码;
	....
	...
	...
}
//try和catch之间不能有其他的代码
catch
{
	出现异常后要执行的代码;
}

执行过程:如果try中的代码没有出现异常，那么catch中的代码不会执行。
如果try中的代码出现了异常，那怕这行出现异常的代码后面还有一百行都不会执行了，
而是直接跳到catch中执行代码


2、变量的作用域
变量的作用域就是你能够使用到这个变量的范围。
变量的作用域一般从声明它的那个括号开始到那个括号所对应的结束的括号结束。
在这个范围内，我们可以访问并使用变量。超出这个范围就访问不到了


3、switch-case
用来处理多条件的定值的判断。
语法：
switch(变量或者表达式的值)
{
	case 值1:要执行的代码;
	break;
	case 值2:要执行的代码;
	break;
	case 值3:要执行的代码;
	break;
	..........
	default:要执行的代码;
	break;
}
执行过程：程序执行到switch处，首先将括号中变量或者表达式的值计算出来，
然后拿着这个值依次跟每个case后面所带的值进行匹配，一旦匹配成功，则执行
该case所带的代码，执行完成后，遇到break。跳出switch-case结构。
如果，跟每个case所带的值都不匹配。就看当前这个switch-case结构中是否存在
default，如果有default，则执行default中的语句，如果没有default，则该switch-case结构
什么都不做。

4、循环结构
while循环：
while(循环条件)
{
	循环体;
}
执行过程：程序运行到while处，首先判断while所带的小括号内的循环条件是否成立，
如果成立的话，也就是返回一个true，则执行循环体，执行完一遍循环体后，再次回到
循环条件进行判断，如果依然成立，则继续执行循环体，如果不成立，则跳出while循环。
在while循环当中，一般总会有那么一行代码，能够改变循环条件，使之终有一天不再成立，
如果没有那么一行代码能够改变循环条件，也就是循环条件永远都成立，我们称之这种循环
叫做死循环。
最简单的最常用的死循环：
while(true)
{

}

特点：先判断，再执行，有可能一遍循环都不执行。
5、break
1)、可以跳出switch-case结构。
2)、可以跳出当前循环。
break一般不单独的使用，而是跟着if判断一起使用，表示，当满足某些条件的时候，就不再循环了。

6、do-while循环。
语法：
do
{
	循环体;
}while(循环条件);
执行过程:程序首先会执行do中的循环体，执行完成后，去判断do-while循环的循环条件，
如果成立，则继续执行do中的循环体，如果不成立，则跳出do-while循环。
特点：先循环，再判断，最少执行一遍循环体。

1、*程序调试
1)、写完一段程序后，想看一下这段程序的执行过程。
2)、当你写完这段程序后，发现，程序并没有按照你想象的样子去执行。

调试方法：
1)、F11逐语句调试(单步调试)
2)、F10逐过程调试
3)、断点调试


2、for循环
语法:
for(表达式1;表达式2;表达式3)
{
	循环体;
}
表达式1一般为声明循环变量，记录循环的次数(int i=0;)
表达式2一般为循环条件(i<10)
表达式3一般为改变循环条件的代码，使循环条件终有一天不再成立(i++)。
执行过程：程序首先执行表达式1，声明了一个循环变量用来记录循环的次数，
然后执行表达式2，判断循环条件是否成立，如果表达式2返回的结果为true，
则执行循环体。当执行完循环体后，执行表达式3，然后执行表达式2继续判断循环条件是否成立，
如果成立则继续执行循环体，如果不成立，则跳出for循环。


3、int.TryParse
int.parse
尝试着将一个字符串转换成int类型。

4、三元表达式
语法:
表达式1?表达式2:表达式3;
表达式1一般为一个关系表达式。
如果表达式1的值为true，那么表达式2的值就是整个三元表达式的值。
如果表达式1的值为false，那么表达式3的值就是整个三元表达式的值。
注意：表达式2的结果类型必须跟表达式3的结果类型一致，并且也要跟整个三元表达式的结果类型一致。


1、变量类型
int double string char bool decimal
变量的使用规则：先声明再赋值最后使用
int number;
number=10;
 number=20;
Console.WriteLine(number);

2、Camel  Pascal

3、运算符
赋值运算符：=
复合赋值运算符：+= -= *= /= %=  sum+=age;  sum=sum+age;
算数运算符： + - * / % ++ --
关系运算符： > < >= <= == !=
逻辑运算符： && || !

4、c#中的语法结构
分支结构：
if if-else
选择结构：
while do-while for


5、常量
声明的常量的语法：
const 变量类型 变量名=值;
什么时候会用到常量？

6、枚举
语法：
[public] enum 枚举名
{
	值1,
	值2,
	值3,
	........
}
public:访问修饰符。公开的公共的，哪都可以访问。
enum：关键字，声明枚举的关键字
枚举名：要符合Pascal命名规范

将枚举声明到命名空间的下面，类的外面，表示这个命名空间下，所有的类都可以使用这个枚举。

枚举就是一个变量类型 ，int--double  string  decimal.
只是枚举声明、赋值、使用的方式跟那些普通的变量类型不一样。


我们可以将一个枚举类型的变量跟int类型和string类型互相转换。
枚举类型默认是跟int类型相互兼容的，所以可以通过强制类型转换的语法互相转换。
当转换一个枚举中没有的值的时候，不会抛异常，而是直接将数字显示出来。

枚举同样也可以跟string类型互相转换，如果将枚举类型转换成string类型，则直接调用ToString().
如果将字符串转换成枚举类型则需要下面这样一行代码：
	(要转换的枚举类型)Enum.Parse(typeof(要转换的枚举类型),"要转换的字符串");
如果转换的字符串是数字，则就算枚举中没有，也会不会抛异常。
如果转换的字符串是文本，如果枚举中没有，则会抛出异常。


7、所有的类型都能够转换成string类型，调用ToString()。


8、结构
可以帮助我们一次性声明多个不同类型的变量。
语法：
[public] struct 结构名
{
	成员;//字段
}
变量在程序运行期间只能存储一个值，而字段可以存储多个值。


9、数组
一次性存储多个相同类型的变量。
语法：
数组类型[] 数组名=new 数组类型[数组长度];

***数组的长度一旦固定了，就不能再被改变了

10、冒泡排序：就是将一个数组中的元素按照从大到小或者从小到大的顺序进行排列。
int[] nums={9,8,7,6,5,4,3,2,1,0}; 0 1 2 3 4 5 6 7 8 9
第一趟比较：8 7 6 5 4 3 2 1 0 9 交换了9次     i=0  j=nums.Length-1-i
第二趟比较：7 6 5 4 3 2 1 0 8 9 交换了8次     i=1  j=nums.Length-1-i
第三趟比较：6 5 4 3 2 1 0 7 8 9 交换了7次     i=2  j=nums.Length-1-i
第四趟比较：5 4 3 2 1 0 6 7 8 9 交换了6次     i=3  j=nums.Length-1-i
第五趟比较：4 3 2 1 0 5 6 7 8 9 交换了5次
第六趟比较：3 2 1 0 4 5 6 7 8 9 交换了4次
第七趟比较：2 1 0 3 4 5 6 7 8 9 交换了3次
第八趟比较：1 0 2 3 4 5 6 7 8 9 交换了2次
第九趟比较：0 1 2 3 4 5 6 7 8 9 交换了1次
for(int i=0;i<number.Length-1;i++)
{
	for(int j=0;j<nums.Length-1-i;j++)
	{
		if(nums[j]>nums[j+1])
		{
			int temp=nums[j];
			nums[j]=nums[j+1];
			nums[j+1]=temp;
		}
	}
}


11、方法
函数就是将一堆代码进行重用的一种机制。
函数的语法：
[public] static 返回值类型 方法名([参数列表])
{
	方法体；
}
public:访问修饰符，公开的，公共的，哪都可以访问。
static：静态的
返回值类型：如果不需要写返回值，写void
方法名：Pascal 每个单词的首字母都大些。其余字母小写
参数列表：完成这个方法所必须要提供给这个方法的条件。如果没有参数，小括号也不能省略。

方法写好后，如果想要被执行，必须要在Main()函数中调用。
方法的调用语法：
类名.方法名([参数]);
***在某些情况下，类名是可以省略的，如果你写的方法跟Main()函数同在一个类中，这个时候，
类名可以省略。

12、return
1、在方法中返回要返回的值。
2、立即结束本次方法。
























































































































